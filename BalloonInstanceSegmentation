# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import tensorflow as tf
import os
import shutil
import tempfile
import matplotlib.pyplot as plt
from PIL import Image
import numpy as np
from sklearn.metrics import classification_report
import torch
import cv2
from tensorflow import keras
from tensorflow.keras import Sequential
from sklearn import preprocessing
from sklearn.preprocessing import OneHotEncoder
from tensorflow.keras.optimizers import Adam
from tensorflow import math
from tensorflow.math import confusion_matrix
import csv

from tensorflow.keras import utils
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.utils import image_dataset_from_directory

import pathlib, os, random, mplcyberpunk, splitfolders
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import BatchNormalization, Dense, Dropout, Flatten, MaxPooling2D, Conv2D, Activation

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

#for dirname, _, filenames in os.walk('/kaggle/input'):
    #for filename in filenames:
        #print(os.path.join(dirname, filename))
        
img_folder_path = 'C:\\Users\\tjsch\\source\\repos\\pyDa\\balloonsData\\'
file_names = ['Balloon-decoration-glendale.jpg'] 
img1 = cv2.imread(img_folder_path + 'Balloon-decoration-glendale.jpg')

#show image
cv2.imshow('balloons',img1)
 
cv2.waitKey(0) # waits until a key is pressed
cv2.destroyAllWindows() # destroys the window showing image

img_gray = cv2.imread(img_folder_path + file_names[0],cv2.IMREAD_GRAYSCALE) 
#show image
cv2.imshow('balloons',img_gray)
 
cv2.waitKey(0) # waits until a key is pressed
cv2.destroyAllWindows() # destroys the window showing image

grad_x = cv2.Sobel(img_gray, cv2.CV_16S, 1, 0, ksize=3)
grad_y = cv2.Sobel(img_gray, cv2.CV_16S, 0, 1, ksize=3)

abs_grad_x = cv2.convertScaleAbs(grad_x)
abs_grad_y = cv2.convertScaleAbs(grad_y)
grad = cv2.addWeighted(abs_grad_x, 0.5, abs_grad_y, 0.5, 0)

fig,ax = plt.subplots(2,2)
ax[0,0].set_title('Original Map(juzicode.com)')
ax[0,0].imshow(img_gray ,cmap = 'gray') 
ax[0,1].set_title('abs_grad_x')
ax[0,1].imshow(abs_grad_x,cmap = 'gray')
ax[1,0].set_title('abs_grad_y')
ax[1,0].imshow(abs_grad_y,cmap = 'gray')
ax[1,1].set_title('grad x+y') 
ax[1,1].imshow(grad,cmap = 'gray')
ax[0,0].axis('off');ax[0,1].axis('off');ax[1,0].axis('off');ax[1,1].axis('off')#Turn off axis display
plt.show() 


data_dir = "C:\\Users\\tjsch\\source\\repos\\pyDa\\balloonsData\\"
output_dir = data_dir+'Imgs\\'

data_path = "C:\\Users\\tjsch\\source\\repos\\pyDa\\balloonsData\\images\\"
data_path = pathlib.Path(data_path)
data_path

#Pseudocode

#For each image in data_path
    #Find contours of image
    #For each contour
        #Pass to CNN model
        #Compare to csv file to see if correct. Use this for loss function.
        #If image is balloon
            #Draw boundary box
            #Draw confidence of model on upper left corner
            
for image in os.listdir(data_dir+"images\\balloons\\"):
    if (image.endswith(".jpg")):
        print(image)
        image_gray = cv.cvtColor(image, cv.COLOR_BGR2GRAY)
        ret, thresh = cv.threshold(imgray, 127, 255, 0)
        image2, contours, hierarchy = cv.findContours(thresh, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE
        print("Number of Contours found = " + str(len(contours)))
        for contour in contours:
            #Draw individual contour                                          
            cv.drawContours(img, [contour], 0, (0,255,0), 3)   
            
checkpoint_save_path = 'C:\\Users\\tjsch\\source\\repos\\pyDa\\balloonData\\Model.ckpt'
if os.path.exists(checkpoint_save_path + '.index'):
    print('---------------------------------------Loading---------------------------------------')
    model.load_weights(checkpoint_save_path)    
    
    
    
model.summary()

file = open(img_folder_path + '/Weights.txt', 'w')
for v in model.trainable_variables:
    file.write(str(v.name) + '\n')
    file.write(str(v.shape) + '\n')
    file.write(str(v.numpy()) + '\n')
    
file.close()   

#This solution seems to capture more of the balloons

# Find Canny edges
edged = cv2.Canny(img_gray, 30, 200)
cv2.waitKey(0)

# Use a copy of the image e.g. edged.copy()
# since findContours alters the image
contours1, hierarchy1 = cv2.findContours(edged, 
    cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
  
cv2.imshow('Canny Edges After Contouring', edged)
cv2.waitKey(0)
  
print("Number of Contours found = " + str(len(contours)))
  
# Draw all contours
# -1 signifies drawing all contours
cv2.drawContours(img1, contours1, -1, (0, 255, 0), 3)
  
cv2.imshow('Contours', img1)
cv2.waitKey(0)
cv2.destroyAllWindows()

#This solution is not as effective as the 'canny' solution

img2 = cv2.imread(img_folder_path + file_names[0])
img2_gray = cv2.imread(img_folder_path + file_names[0],cv2.IMREAD_GRAYSCALE)
# Finding Contours
imgAT = cv2.adaptiveThreshold(img2_gray,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,\
            cv2.THRESH_BINARY,11,2)
cv2.waitKey(0)
contours2, hierarchy2 = cv2.findContours(imgAT, 
    cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
  
cv2.imshow('Canny Edges After thresholding', imgAT)
cv2.waitKey(0)
cv2.destroyAllWindows()
  
print("Number of Contours found = " + str(len(contours)))
  
# Draw all contours
# -1 signifies drawing all contours
cv2.drawContours(img2, contours2, -1, (0, 255, 0), 3)
cv2.imshow('Boxed Balloons', img2)
cv2.waitKey(0)
cv2.destroyAllWindows()
    
